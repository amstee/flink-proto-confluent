// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flink/formats/proto/test/v1/test_enums.proto

// Protobuf Java Version: 3.25.3
package com.amstee.flink.formats.proto.test.v1;

/**
 * Protobuf type {@code amstee.flink.formats.proto.test.v1.TestEnum}
 */
public final class TestEnum extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:amstee.flink.formats.proto.test.v1.TestEnum)
    TestEnumOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TestEnum.newBuilder() to construct.
  private TestEnum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TestEnum() {
    type_ = 0;
    status_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TestEnum();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.amstee.flink.formats.proto.test.v1.TestEnumsProto.internal_static_amstee_flink_formats_proto_test_v1_TestEnum_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 3:
        return internalGetStatusMap();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.amstee.flink.formats.proto.test.v1.TestEnumsProto.internal_static_amstee_flink_formats_proto_test_v1_TestEnum_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.amstee.flink.formats.proto.test.v1.TestEnum.class, com.amstee.flink.formats.proto.test.v1.TestEnum.Builder.class);
  }

  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_ = 0;
  /**
   * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
   * @return The type.
   */
  @java.lang.Override public com.amstee.flink.formats.proto.test.v1.MessageType getType() {
    com.amstee.flink.formats.proto.test.v1.MessageType result = com.amstee.flink.formats.proto.test.v1.MessageType.forNumber(type_);
    return result == null ? com.amstee.flink.formats.proto.test.v1.MessageType.UNRECOGNIZED : result;
  }

  public static final int STATUS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> status_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, com.amstee.flink.formats.proto.test.v1.MessageStatus> status_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.amstee.flink.formats.proto.test.v1.MessageStatus>() {
            public com.amstee.flink.formats.proto.test.v1.MessageStatus convert(java.lang.Integer from) {
              com.amstee.flink.formats.proto.test.v1.MessageStatus result = com.amstee.flink.formats.proto.test.v1.MessageStatus.forNumber(from);
              return result == null ? com.amstee.flink.formats.proto.test.v1.MessageStatus.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
   * @return A list containing the status.
   */
  @java.lang.Override
  public java.util.List<com.amstee.flink.formats.proto.test.v1.MessageStatus> getStatusList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.amstee.flink.formats.proto.test.v1.MessageStatus>(status_, status_converter_);
  }
  /**
   * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
   * @return The count of status.
   */
  @java.lang.Override
  public int getStatusCount() {
    return status_.size();
  }
  /**
   * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
   * @param index The index of the element to return.
   * @return The status at the given index.
   */
  @java.lang.Override
  public com.amstee.flink.formats.proto.test.v1.MessageStatus getStatus(int index) {
    return status_converter_.convert(status_.get(index));
  }
  /**
   * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
   * @return A list containing the enum numeric values on the wire for status.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getStatusValueList() {
    return status_;
  }
  /**
   * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of status at the given index.
   */
  @java.lang.Override
  public int getStatusValue(int index) {
    return status_.get(index);
  }
  private int statusMemoizedSerializedSize;

  public static final int STATUSMAP_FIELD_NUMBER = 3;
  private static final class StatusMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                com.amstee.flink.formats.proto.test.v1.TestEnumsProto.internal_static_amstee_flink_formats_proto_test_v1_TestEnum_StatusMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.ENUM,
                com.amstee.flink.formats.proto.test.v1.MessageStatus.SENT.getNumber());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> statusMap_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetStatusMap() {
    if (statusMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          StatusMapDefaultEntryHolder.defaultEntry);
    }
    return statusMap_;
  }
  private static final
  com.google.protobuf.Internal.MapAdapter.Converter<
      java.lang.Integer, com.amstee.flink.formats.proto.test.v1.MessageStatus> statusMapValueConverter =
          com.google.protobuf.Internal.MapAdapter.newEnumConverter(
              com.amstee.flink.formats.proto.test.v1.MessageStatus.internalGetValueMap(),
              com.amstee.flink.formats.proto.test.v1.MessageStatus.UNRECOGNIZED);
  private static final java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus>
  internalGetAdaptedStatusMapMap(
      java.util.Map<java.lang.String, java.lang.Integer> map) {
    return new com.google.protobuf.Internal.MapAdapter<
        java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus, java.lang.Integer>(
            map, statusMapValueConverter);
  }
  public int getStatusMapCount() {
    return internalGetStatusMap().getMap().size();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public boolean containsStatusMap(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetStatusMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getStatusMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus>
  getStatusMap() {
    return getStatusMapMap();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus>
  getStatusMapMap() {
    return internalGetAdaptedStatusMapMap(
        internalGetStatusMap().getMap());}
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.amstee.flink.formats.proto.test.v1.MessageStatus getStatusMapOrDefault(
      java.lang.String key,
      /* nullable */
com.amstee.flink.formats.proto.test.v1.MessageStatus defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetStatusMap().getMap();
    return map.containsKey(key)
           ? statusMapValueConverter.doForward(map.get(key))
           : defaultValue;
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public com.amstee.flink.formats.proto.test.v1.MessageStatus getStatusMapOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetStatusMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return statusMapValueConverter.doForward(map.get(key));
  }
  /**
   * Use {@link #getStatusMapValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer>
  getStatusMapValue() {
    return getStatusMapValueMap();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.Integer>
  getStatusMapValueMap() {
    return internalGetStatusMap().getMap();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public int getStatusMapValueOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetStatusMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
   */
  @java.lang.Override
  public int getStatusMapValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetStatusMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (type_ != com.amstee.flink.formats.proto.test.v1.MessageType.TEXT.getNumber()) {
      output.writeEnum(1, type_);
    }
    if (getStatusList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(statusMemoizedSerializedSize);
    }
    for (int i = 0; i < status_.size(); i++) {
      output.writeEnumNoTag(status_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetStatusMap(),
        StatusMapDefaultEntryHolder.defaultEntry,
        3);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (type_ != com.amstee.flink.formats.proto.test.v1.MessageType.TEXT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < status_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(status_.get(i));
      }
      size += dataSize;
      if (!getStatusList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }statusMemoizedSerializedSize = dataSize;
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetStatusMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      statusMap__ = StatusMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, statusMap__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.amstee.flink.formats.proto.test.v1.TestEnum)) {
      return super.equals(obj);
    }
    com.amstee.flink.formats.proto.test.v1.TestEnum other = (com.amstee.flink.formats.proto.test.v1.TestEnum) obj;

    if (type_ != other.type_) return false;
    if (!status_.equals(other.status_)) return false;
    if (!internalGetStatusMap().equals(
        other.internalGetStatusMap())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    if (getStatusCount() > 0) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_.hashCode();
    }
    if (!internalGetStatusMap().getMap().isEmpty()) {
      hash = (37 * hash) + STATUSMAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetStatusMap().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.amstee.flink.formats.proto.test.v1.TestEnum parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.amstee.flink.formats.proto.test.v1.TestEnum prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code amstee.flink.formats.proto.test.v1.TestEnum}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:amstee.flink.formats.proto.test.v1.TestEnum)
      com.amstee.flink.formats.proto.test.v1.TestEnumOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.amstee.flink.formats.proto.test.v1.TestEnumsProto.internal_static_amstee_flink_formats_proto_test_v1_TestEnum_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 3:
          return internalGetStatusMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableStatusMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.amstee.flink.formats.proto.test.v1.TestEnumsProto.internal_static_amstee_flink_formats_proto_test_v1_TestEnum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.amstee.flink.formats.proto.test.v1.TestEnum.class, com.amstee.flink.formats.proto.test.v1.TestEnum.Builder.class);
    }

    // Construct using com.amstee.flink.formats.proto.test.v1.TestEnum.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      type_ = 0;
      status_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableStatusMap().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.amstee.flink.formats.proto.test.v1.TestEnumsProto.internal_static_amstee_flink_formats_proto_test_v1_TestEnum_descriptor;
    }

    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.TestEnum getDefaultInstanceForType() {
      return com.amstee.flink.formats.proto.test.v1.TestEnum.getDefaultInstance();
    }

    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.TestEnum build() {
      com.amstee.flink.formats.proto.test.v1.TestEnum result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.TestEnum buildPartial() {
      com.amstee.flink.formats.proto.test.v1.TestEnum result = new com.amstee.flink.formats.proto.test.v1.TestEnum(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.amstee.flink.formats.proto.test.v1.TestEnum result) {
      if (((bitField0_ & 0x00000002) != 0)) {
        status_ = java.util.Collections.unmodifiableList(status_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.status_ = status_;
    }

    private void buildPartial0(com.amstee.flink.formats.proto.test.v1.TestEnum result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.type_ = type_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.statusMap_ = internalGetStatusMap();
        result.statusMap_.makeImmutable();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.amstee.flink.formats.proto.test.v1.TestEnum) {
        return mergeFrom((com.amstee.flink.formats.proto.test.v1.TestEnum)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.amstee.flink.formats.proto.test.v1.TestEnum other) {
      if (other == com.amstee.flink.formats.proto.test.v1.TestEnum.getDefaultInstance()) return this;
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (!other.status_.isEmpty()) {
        if (status_.isEmpty()) {
          status_ = other.status_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureStatusIsMutable();
          status_.addAll(other.status_);
        }
        onChanged();
      }
      internalGetMutableStatusMap().mergeFrom(
          other.internalGetStatusMap());
      bitField0_ |= 0x00000004;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              type_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              int tmpRaw = input.readEnum();
              ensureStatusIsMutable();
              status_.add(tmpRaw);
              break;
            } // case 16
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureStatusIsMutable();
                status_.add(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              statusMap__ = input.readMessage(
                  StatusMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableStatusMap().getMutableMap().put(
                  statusMap__.getKey(), statusMap__.getValue());
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int type_ = 0;
    /**
     * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
     * @return The type.
     */
    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.MessageType getType() {
      com.amstee.flink.formats.proto.test.v1.MessageType result = com.amstee.flink.formats.proto.test.v1.MessageType.forNumber(type_);
      return result == null ? com.amstee.flink.formats.proto.test.v1.MessageType.UNRECOGNIZED : result;
    }
    /**
     * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(com.amstee.flink.formats.proto.test.v1.MessageType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.amstee.flink.formats.proto.test.v1.MessageType type = 1 [json_name = "type"];</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> status_ =
      java.util.Collections.emptyList();
    private void ensureStatusIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        status_ = new java.util.ArrayList<java.lang.Integer>(status_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @return A list containing the status.
     */
    public java.util.List<com.amstee.flink.formats.proto.test.v1.MessageStatus> getStatusList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.amstee.flink.formats.proto.test.v1.MessageStatus>(status_, status_converter_);
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @return The count of status.
     */
    public int getStatusCount() {
      return status_.size();
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param index The index of the element to return.
     * @return The status at the given index.
     */
    public com.amstee.flink.formats.proto.test.v1.MessageStatus getStatus(int index) {
      return status_converter_.convert(status_.get(index));
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param index The index to set the value at.
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(
        int index, com.amstee.flink.formats.proto.test.v1.MessageStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStatusIsMutable();
      status_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param value The status to add.
     * @return This builder for chaining.
     */
    public Builder addStatus(com.amstee.flink.formats.proto.test.v1.MessageStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStatusIsMutable();
      status_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param values The status to add.
     * @return This builder for chaining.
     */
    public Builder addAllStatus(
        java.lang.Iterable<? extends com.amstee.flink.formats.proto.test.v1.MessageStatus> values) {
      ensureStatusIsMutable();
      for (com.amstee.flink.formats.proto.test.v1.MessageStatus value : values) {
        status_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      status_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @return A list containing the enum numeric values on the wire for status.
     */
    public java.util.List<java.lang.Integer>
    getStatusValueList() {
      return java.util.Collections.unmodifiableList(status_);
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of status at the given index.
     */
    public int getStatusValue(int index) {
      return status_.get(index);
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(
        int index, int value) {
      ensureStatusIsMutable();
      status_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param value The enum numeric value on the wire for status to add.
     * @return This builder for chaining.
     */
    public Builder addStatusValue(int value) {
      ensureStatusIsMutable();
      status_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .amstee.flink.formats.proto.test.v1.MessageStatus status = 2 [json_name = "status"];</code>
     * @param values The enum numeric values on the wire for status to add.
     * @return This builder for chaining.
     */
    public Builder addAllStatusValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureStatusIsMutable();
      for (int value : values) {
        status_.add(value);
      }
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> statusMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetStatusMap() {
      if (statusMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StatusMapDefaultEntryHolder.defaultEntry);
      }
      return statusMap_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetMutableStatusMap() {
      if (statusMap_ == null) {
        statusMap_ = com.google.protobuf.MapField.newMapField(
            StatusMapDefaultEntryHolder.defaultEntry);
      }
      if (!statusMap_.isMutable()) {
        statusMap_ = statusMap_.copy();
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return statusMap_;
    }
    public int getStatusMapCount() {
      return internalGetStatusMap().getMap().size();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public boolean containsStatusMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetStatusMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStatusMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus>
    getStatusMap() {
      return getStatusMapMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus>
    getStatusMapMap() {
      return internalGetAdaptedStatusMapMap(
          internalGetStatusMap().getMap());}
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.amstee.flink.formats.proto.test.v1.MessageStatus getStatusMapOrDefault(
        java.lang.String key,
        /* nullable */
com.amstee.flink.formats.proto.test.v1.MessageStatus defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetStatusMap().getMap();
      return map.containsKey(key)
             ? statusMapValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.MessageStatus getStatusMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetStatusMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return statusMapValueConverter.doForward(map.get(key));
    }
    /**
     * Use {@link #getStatusMapValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getStatusMapValue() {
      return getStatusMapValueMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Integer>
    getStatusMapValueMap() {
      return internalGetStatusMap().getMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public int getStatusMapValueOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetStatusMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    @java.lang.Override
    public int getStatusMapValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetStatusMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearStatusMap() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableStatusMap().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    public Builder removeStatusMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableStatusMap().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus>
        getMutableStatusMap() {
      bitField0_ |= 0x00000004;
      return internalGetAdaptedStatusMapMap(
           internalGetMutableStatusMap().getMutableMap());
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    public Builder putStatusMap(
        java.lang.String key,
        com.amstee.flink.formats.proto.test.v1.MessageStatus value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableStatusMap().getMutableMap()
          .put(key, statusMapValueConverter.doBackward(value));
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    public Builder putAllStatusMap(
        java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.MessageStatus> values) {
      internalGetAdaptedStatusMapMap(
          internalGetMutableStatusMap().getMutableMap())
              .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableStatusMapValue() {
      bitField0_ |= 0x00000004;
      return internalGetMutableStatusMap().getMutableMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    public Builder putStatusMapValue(
        java.lang.String key,
        int value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableStatusMap().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.MessageStatus&gt; statusMap = 3 [json_name = "statusMap"];</code>
     */
    public Builder putAllStatusMapValue(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableStatusMap().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:amstee.flink.formats.proto.test.v1.TestEnum)
  }

  // @@protoc_insertion_point(class_scope:amstee.flink.formats.proto.test.v1.TestEnum)
  private static final com.amstee.flink.formats.proto.test.v1.TestEnum DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.amstee.flink.formats.proto.test.v1.TestEnum();
  }

  public static com.amstee.flink.formats.proto.test.v1.TestEnum getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TestEnum>
      PARSER = new com.google.protobuf.AbstractParser<TestEnum>() {
    @java.lang.Override
    public TestEnum parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TestEnum> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TestEnum> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.amstee.flink.formats.proto.test.v1.TestEnum getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

