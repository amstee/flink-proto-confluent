// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flink/formats/proto/test/v1/test_map.proto

// Protobuf Java Version: 3.25.3
package com.amstee.flink.formats.proto.test.v1;

/**
 * Protobuf type {@code amstee.flink.formats.proto.test.v1.MapTest}
 */
public final class MapTest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:amstee.flink.formats.proto.test.v1.MapTest)
    MapTestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MapTest.newBuilder() to construct.
  private MapTest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MapTest() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MapTest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 1:
        return internalGetSimpleStringMap();
      case 2:
        return internalGetNestedMap();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.amstee.flink.formats.proto.test.v1.MapTest.class, com.amstee.flink.formats.proto.test.v1.MapTest.Builder.class);
  }

  public static final int SIMPLE_STRING_MAP_FIELD_NUMBER = 1;
  private static final class SimpleStringMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_SimpleStringMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> simpleStringMap_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetSimpleStringMap() {
    if (simpleStringMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          SimpleStringMapDefaultEntryHolder.defaultEntry);
    }
    return simpleStringMap_;
  }
  public int getSimpleStringMapCount() {
    return internalGetSimpleStringMap().getMap().size();
  }
  /**
   * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
   */
  @java.lang.Override
  public boolean containsSimpleStringMap(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetSimpleStringMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getSimpleStringMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getSimpleStringMap() {
    return getSimpleStringMapMap();
  }
  /**
   * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getSimpleStringMapMap() {
    return internalGetSimpleStringMap().getMap();
  }
  /**
   * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
   */
  @java.lang.Override
  public /* nullable */
java.lang.String getSimpleStringMapOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetSimpleStringMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
   */
  @java.lang.Override
  public java.lang.String getSimpleStringMapOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetSimpleStringMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int NESTED_MAP_FIELD_NUMBER = 2;
  private static final class NestedMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap>newDefaultInstance(
                com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_NestedMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.amstee.flink.formats.proto.test.v1.NestedMap.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> nestedMap_;
  private com.google.protobuf.MapField<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap>
  internalGetNestedMap() {
    if (nestedMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          NestedMapDefaultEntryHolder.defaultEntry);
    }
    return nestedMap_;
  }
  public int getNestedMapCount() {
    return internalGetNestedMap().getMap().size();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
   */
  @java.lang.Override
  public boolean containsNestedMap(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetNestedMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getNestedMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> getNestedMap() {
    return getNestedMapMap();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> getNestedMapMap() {
    return internalGetNestedMap().getMap();
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.amstee.flink.formats.proto.test.v1.NestedMap getNestedMapOrDefault(
      java.lang.String key,
      /* nullable */
com.amstee.flink.formats.proto.test.v1.NestedMap defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> map =
        internalGetNestedMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
   */
  @java.lang.Override
  public com.amstee.flink.formats.proto.test.v1.NestedMap getNestedMapOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> map =
        internalGetNestedMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetSimpleStringMap(),
        SimpleStringMapDefaultEntryHolder.defaultEntry,
        1);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetNestedMap(),
        NestedMapDefaultEntryHolder.defaultEntry,
        2);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetSimpleStringMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      simpleStringMap__ = SimpleStringMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, simpleStringMap__);
    }
    for (java.util.Map.Entry<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> entry
         : internalGetNestedMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap>
      nestedMap__ = NestedMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, nestedMap__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.amstee.flink.formats.proto.test.v1.MapTest)) {
      return super.equals(obj);
    }
    com.amstee.flink.formats.proto.test.v1.MapTest other = (com.amstee.flink.formats.proto.test.v1.MapTest) obj;

    if (!internalGetSimpleStringMap().equals(
        other.internalGetSimpleStringMap())) return false;
    if (!internalGetNestedMap().equals(
        other.internalGetNestedMap())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetSimpleStringMap().getMap().isEmpty()) {
      hash = (37 * hash) + SIMPLE_STRING_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetSimpleStringMap().hashCode();
    }
    if (!internalGetNestedMap().getMap().isEmpty()) {
      hash = (37 * hash) + NESTED_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetNestedMap().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.amstee.flink.formats.proto.test.v1.MapTest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.amstee.flink.formats.proto.test.v1.MapTest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.amstee.flink.formats.proto.test.v1.MapTest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.amstee.flink.formats.proto.test.v1.MapTest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code amstee.flink.formats.proto.test.v1.MapTest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:amstee.flink.formats.proto.test.v1.MapTest)
      com.amstee.flink.formats.proto.test.v1.MapTestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetSimpleStringMap();
        case 2:
          return internalGetNestedMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableSimpleStringMap();
        case 2:
          return internalGetMutableNestedMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.amstee.flink.formats.proto.test.v1.MapTest.class, com.amstee.flink.formats.proto.test.v1.MapTest.Builder.class);
    }

    // Construct using com.amstee.flink.formats.proto.test.v1.MapTest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableSimpleStringMap().clear();
      internalGetMutableNestedMap().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.amstee.flink.formats.proto.test.v1.TestMapProto.internal_static_amstee_flink_formats_proto_test_v1_MapTest_descriptor;
    }

    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.MapTest getDefaultInstanceForType() {
      return com.amstee.flink.formats.proto.test.v1.MapTest.getDefaultInstance();
    }

    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.MapTest build() {
      com.amstee.flink.formats.proto.test.v1.MapTest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.MapTest buildPartial() {
      com.amstee.flink.formats.proto.test.v1.MapTest result = new com.amstee.flink.formats.proto.test.v1.MapTest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.amstee.flink.formats.proto.test.v1.MapTest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.simpleStringMap_ = internalGetSimpleStringMap();
        result.simpleStringMap_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.nestedMap_ = internalGetNestedMap().build(NestedMapDefaultEntryHolder.defaultEntry);
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.amstee.flink.formats.proto.test.v1.MapTest) {
        return mergeFrom((com.amstee.flink.formats.proto.test.v1.MapTest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.amstee.flink.formats.proto.test.v1.MapTest other) {
      if (other == com.amstee.flink.formats.proto.test.v1.MapTest.getDefaultInstance()) return this;
      internalGetMutableSimpleStringMap().mergeFrom(
          other.internalGetSimpleStringMap());
      bitField0_ |= 0x00000001;
      internalGetMutableNestedMap().mergeFrom(
          other.internalGetNestedMap());
      bitField0_ |= 0x00000002;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              simpleStringMap__ = input.readMessage(
                  SimpleStringMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableSimpleStringMap().getMutableMap().put(
                  simpleStringMap__.getKey(), simpleStringMap__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap>
              nestedMap__ = input.readMessage(
                  NestedMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableNestedMap().ensureBuilderMap().put(
                  nestedMap__.getKey(), nestedMap__.getValue());
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> simpleStringMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetSimpleStringMap() {
      if (simpleStringMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SimpleStringMapDefaultEntryHolder.defaultEntry);
      }
      return simpleStringMap_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableSimpleStringMap() {
      if (simpleStringMap_ == null) {
        simpleStringMap_ = com.google.protobuf.MapField.newMapField(
            SimpleStringMapDefaultEntryHolder.defaultEntry);
      }
      if (!simpleStringMap_.isMutable()) {
        simpleStringMap_ = simpleStringMap_.copy();
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return simpleStringMap_;
    }
    public int getSimpleStringMapCount() {
      return internalGetSimpleStringMap().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    @java.lang.Override
    public boolean containsSimpleStringMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetSimpleStringMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSimpleStringMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getSimpleStringMap() {
      return getSimpleStringMapMap();
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getSimpleStringMapMap() {
      return internalGetSimpleStringMap().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getSimpleStringMapOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSimpleStringMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    @java.lang.Override
    public java.lang.String getSimpleStringMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSimpleStringMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearSimpleStringMap() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableSimpleStringMap().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    public Builder removeSimpleStringMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableSimpleStringMap().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
        getMutableSimpleStringMap() {
      bitField0_ |= 0x00000001;
      return internalGetMutableSimpleStringMap().getMutableMap();
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    public Builder putSimpleStringMap(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableSimpleStringMap().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; simple_string_map = 1 [json_name = "simpleStringMap"];</code>
     */
    public Builder putAllSimpleStringMap(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableSimpleStringMap().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }

    private static final class NestedMapConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder, com.amstee.flink.formats.proto.test.v1.NestedMap> {
      @java.lang.Override
      public com.amstee.flink.formats.proto.test.v1.NestedMap build(com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder val) {
        if (val instanceof com.amstee.flink.formats.proto.test.v1.NestedMap) { return (com.amstee.flink.formats.proto.test.v1.NestedMap) val; }
        return ((com.amstee.flink.formats.proto.test.v1.NestedMap.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> defaultEntry() {
        return NestedMapDefaultEntryHolder.defaultEntry;
      }
    };
    private static final NestedMapConverter nestedMapConverter = new NestedMapConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder, com.amstee.flink.formats.proto.test.v1.NestedMap, com.amstee.flink.formats.proto.test.v1.NestedMap.Builder> nestedMap_;
    private com.google.protobuf.MapFieldBuilder<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder, com.amstee.flink.formats.proto.test.v1.NestedMap, com.amstee.flink.formats.proto.test.v1.NestedMap.Builder>
        internalGetNestedMap() {
      if (nestedMap_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(nestedMapConverter);
      }
      return nestedMap_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder, com.amstee.flink.formats.proto.test.v1.NestedMap, com.amstee.flink.formats.proto.test.v1.NestedMap.Builder>
        internalGetMutableNestedMap() {
      if (nestedMap_ == null) {
        nestedMap_ = new com.google.protobuf.MapFieldBuilder<>(nestedMapConverter);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return nestedMap_;
    }
    public int getNestedMapCount() {
      return internalGetNestedMap().ensureBuilderMap().size();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    @java.lang.Override
    public boolean containsNestedMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetNestedMap().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getNestedMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> getNestedMap() {
      return getNestedMapMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> getNestedMapMap() {
      return internalGetNestedMap().getImmutableMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.amstee.flink.formats.proto.test.v1.NestedMap getNestedMapOrDefault(
        java.lang.String key,
        /* nullable */
com.amstee.flink.formats.proto.test.v1.NestedMap defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder> map = internalGetMutableNestedMap().ensureBuilderMap();
      return map.containsKey(key) ? nestedMapConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    @java.lang.Override
    public com.amstee.flink.formats.proto.test.v1.NestedMap getNestedMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder> map = internalGetMutableNestedMap().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return nestedMapConverter.build(map.get(key));
    }
    public Builder clearNestedMap() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableNestedMap().clear();
      return this;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    public Builder removeNestedMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableNestedMap().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap>
        getMutableNestedMap() {
      bitField0_ |= 0x00000002;
      return internalGetMutableNestedMap().ensureMessageMap();
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    public Builder putNestedMap(
        java.lang.String key,
        com.amstee.flink.formats.proto.test.v1.NestedMap value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableNestedMap().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    public Builder putAllNestedMap(
        java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> values) {
      for (java.util.Map.Entry<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMap> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableNestedMap().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>map&lt;string, .amstee.flink.formats.proto.test.v1.NestedMap&gt; nested_map = 2 [json_name = "nestedMap"];</code>
     */
    public com.amstee.flink.formats.proto.test.v1.NestedMap.Builder putNestedMapBuilderIfAbsent(
        java.lang.String key) {
      java.util.Map<java.lang.String, com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder> builderMap = internalGetMutableNestedMap().ensureBuilderMap();
      com.amstee.flink.formats.proto.test.v1.NestedMapOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = com.amstee.flink.formats.proto.test.v1.NestedMap.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof com.amstee.flink.formats.proto.test.v1.NestedMap) {
        entry = ((com.amstee.flink.formats.proto.test.v1.NestedMap) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (com.amstee.flink.formats.proto.test.v1.NestedMap.Builder) entry;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:amstee.flink.formats.proto.test.v1.MapTest)
  }

  // @@protoc_insertion_point(class_scope:amstee.flink.formats.proto.test.v1.MapTest)
  private static final com.amstee.flink.formats.proto.test.v1.MapTest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.amstee.flink.formats.proto.test.v1.MapTest();
  }

  public static com.amstee.flink.formats.proto.test.v1.MapTest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MapTest>
      PARSER = new com.google.protobuf.AbstractParser<MapTest>() {
    @java.lang.Override
    public MapTest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MapTest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MapTest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.amstee.flink.formats.proto.test.v1.MapTest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

